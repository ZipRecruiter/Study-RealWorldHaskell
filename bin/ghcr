#!/usr/bin/env stack
-- stack --resolver lts-9.21 script --package raw-strings-qq --package process

{-# LANGUAGE BangPatterns #-}

{-
  This is a program for testing haskell files that just contain pure functional
  code. Here are some example uses:

  # Run a Haskell expression using a code file:
  ./bin/ghcr mjd/chapter-04/splitWith.hs "splitWith2 (== ' ') \"foo  bar\""

  # Run an expression that reads from stdin and writes to stdout.
  # Note the `-i` flag for 'interactive':
  ./bin/ghcr -i ingy/chapter-04/a-3.hs firstWords < ingy/chapter-04/a-3.hs

  # Run a program's test function (inline test suite):
  ./bin/ghcr ingy/chapter-04/a-2.hs test
 -}

import System.Environment
import System.IO
import System.Process
import System.Exit
import Data.List

usage = "Usage: ghcr [-i] <file> <func>"

main = do
  argv <- getArgs
  let args = filter (not.isOption) argv
  let ![file, func] = if length args == 2
      then args
      else errorWithoutStackTrace usage

  mktemp <- readProcess "mktemp" ["-d"] ""
  let tempDir = init mktemp
      tempFile = tempDir ++ "/test.hs"

  code <- readFile file

  let main_func = if "-i" `elem` argv then
        "main = do interact $ " ++ func
      else if func == "test" then
        "main = do test"
      else
        "main = do print $ " ++ func

  let program = intercalate "\n" [
        "import Control.Exception (SomeException)",
        code,
        main_func,
        "",
        "printErr :: SomeException -> IO ()",
        "printErr e = putStrLn $ \"Error: \" ++ show e"
        ]

  writeFile tempFile program

  rc <- system $ "runghc " ++ tempFile

  if rc == ExitSuccess
  then do
    system $ "rm -fr " ++ tempDir
    putStr ""
  else do
    putStrLn $ "\n*** Error in " ++ tempFile ++ ":\n"
    putStrLn program

  where
    isOption s = head s == '-'

-- vim: ft=haskell sw=2:
