#!/usr/bin/env stack
{- stack
     --resolver lts-9.21 script
     --package executable-path
     --package filepath
     --package process
     --package raw-strings-qq
     --package MissingH
-}

{-# LANGUAGE BangPatterns #-}

{-

'ghcr' is a program for testing haskell files that contain pure functional code.

Here are some example uses:

  # Run a Haskell expression using a code file:
  ./bin/ghcr mjd/chapter-04/splitWith.hs "splitWith2 (== ' ') \"foo bar\""

  # Run an expression that reads from stdin and writes to stdout.
  # Note the `-i` flag for 'interactive':
  ./bin/ghcr -i ingy/chapter-04/a-3.hs firstWords < ingy/chapter-04/a-3.hs

  # Run a program's test function (inline test suite):
  ./bin/ghcr ingy/chapter-04/a-2.hs test
  ./bin/ghcr ingy/chapter-04/b-1.hs test

Options:

-h -- Help. Print this documentation.
-i -- Interactive. Read from stdin, write to stdout.
-d -- Debug. cat temp file on error.

-}

import Data.List            (break)
import Data.Maybe           (fromJust)
import System.Environment   (getArgs)
import System.Environment.Executable (getScriptPath)
import System.Exit          (exitSuccess, ExitCode(ExitSuccess))
import System.FilePath      (takeDirectory, takeFileName, (</>))
import System.IO            (readFile, writeFile)
import System.Process       (system, readProcess)

usage = "Usage: ghcr [<option>...] <file> <func>"

main = do
  argv <- getArgs

  if "-h" `elem` argv ||
     "-?" `elem` argv
  then do
    printHelp
    exitSuccess
  else putStr ""

  let args = filter (\s -> (head s) /= '-') argv
  let ![file, func] = if length args == 2
      then args
      else errorWithoutStackTrace usage

  mktemp <- readProcess "mktemp" ["-d", "/tmp/ghcr.XXXXXXXX"] ""
  let tempDir = init mktemp     -- Remove trailing newline
      tempFile = tempDir ++ "/test.hs"

  code <- readFile file

  let main_func = if "-i" `elem` argv then
        "main = do interact $ " ++ func
      else if func == "test" then
        "main = do test"
      else
        "main = do print $ " ++ func

  let program = unlines [
        sourceFilter code,
        "-- 'ghcr' ADDED LINES BELOW ----------------------------------------",
        "",
        main_func
        ]

  writeFile tempFile program

  spath <- getScriptPath
  let path = takeWhile (/='"') $ drop 1 $ dropWhile (/='"') $ show spath

  rc <- system $
    "runghc -- -i$(cd $(dirname " ++
    path ++
    ")/../lib && pwd) " ++
    tempFile

  if rc == ExitSuccess
  then do
    system $ "rm -fr " ++ tempDir
    putStr ""
  else do
    putStrLn $ "\n*** See file '" ++ tempFile ++ "'\n"
    if "-d" `elem` argv
    then putStr program
    else putStr ""

  where
    printHelp = do
      spath <- getScriptPath
      let path = takeWhile (/='"') $ drop 1 $ dropWhile (/='"') $ show spath
      text <- readFile path

      putStr $
        unlines $
        drop 1 $
        takeWhile (/="-}") $
        dropWhile (/="{-") $
        lines text

    sourceFilter xs =
      unlines $ map (\x ->
        if (x == "-- ghcr-imports")
          then "import Control.Exception (catch); import TryPrintErr (printErr)"
          else x
      ) $ lines xs

-- vim: ft=haskell sw=2:
